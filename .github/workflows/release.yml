name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  test:
    name: Run Tests Before Release
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: ${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install test dependencies
        run: uv pip install --system --upgrade pip hatchling hatch-vcs ".[test]"

      - name: Install Playwright browsers
        run: playwright install chromium

      - name: Run tests with Pytest
        run: hatch run test:test-cov --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install --system build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 90

  build-executables:
    name: Build Executables
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.12"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true

      - name: Install PyInstaller and dependencies
        run: |
          uv pip install --system --upgrade pip hatchling hatch-vcs
          uv pip install --system pyinstaller ".[test]"

      - name: Install Playwright browsers
        run: playwright install chromium

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --name d361-offline-${{ matrix.os }} --add-data "src/d361/offline/d361_offline.css:d361/offline" src/d361/offline/__main__.py

      - name: Test executable (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          ./dist/d361-offline-${{ matrix.os }} --help

      - name: Test executable (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          ./dist/d361-offline-${{ matrix.os }}.exe --help

      - name: Upload executable artifacts
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/d361-offline-${{ matrix.os }}*
          retention-days: 90

  release:
    name: Create Release
    needs: [build, build-executables]
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/d361
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/

      - name: Download executable artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: executable-*
          path: executables/
          merge-multiple: true

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp dist/* release-assets/
          cp executables/* release-assets/
          ls -la release-assets/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          
          # Generate release notes
          cat > release-notes.md << EOF
          # Release ${{ github.ref_name }}
          
          ## Installation
          
          ### Via pip
          \`\`\`bash
          pip install d361==$VERSION
          \`\`\`
          
          ### Via uv
          \`\`\`bash
          uv pip install d361==$VERSION
          \`\`\`
          
          ### Binary Downloads
          
          Download the pre-built binaries for your platform:
          
          - **Linux**: \`d361-offline-ubuntu-latest\`
          - **Windows**: \`d361-offline-windows-latest.exe\`
          - **macOS**: \`d361-offline-macos-latest\`
          
          Make the binary executable and run:
          \`\`\`bash
          chmod +x d361-offline-*
          ./d361-offline-* --help
          \`\`\`
          
          ## Changes
          
          EOF
          
          # Get changes since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "### Commits since $PREVIOUS_TAG:" >> release-notes.md
            git log --oneline --no-merges $PREVIOUS_TAG..HEAD | sed 's/^/- /' >> release-notes.md
          else
            echo "### Initial release" >> release-notes.md
          fi
          
          echo "" >> release-notes.md
          echo "## Full Changelog" >> release-notes.md
          echo "" >> release-notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${{ github.ref_name }}" >> release-notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body_path: release-notes.md
          make_latest: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-release:
    name: Test Release Installation
    needs: release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install from PyPI
        run: |
          python -m pip install --upgrade pip
          python -m pip install d361

      - name: Test CLI installation
        run: |
          d361-offline --help

      - name: Test package import
        run: |
          python -c "import d361; print(f'Successfully installed d361 version: {d361.__version__}')" 